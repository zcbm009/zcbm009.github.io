<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>zcbm-blog</title>
    <link href="https://zcbm009.github.io/feed.xml" rel="self" />
    <link href="https://zcbm009.github.io" />
    <updated>2022-01-06T16:50:04+08:00</updated>
    <author>
        <name>zcbm</name>
    </author>
    <id>https://zcbm009.github.io</id>

    <entry>
        <title>坏习惯</title>
        <author>
            <name>zcbm</name>
        </author>
        <link href="https://zcbm009.github.io/pi-xi-guan.html"/>
        <id>https://zcbm009.github.io/pi-xi-guan.html</id>
            <category term="自省"/>
            <category term="以今日之我攻昨日之我"/>

        <updated>2022-01-06T16:50:04+08:00</updated>
            <summary>
                <![CDATA[
                    以今日之我，攻昨日之我 关于游戏与视频的解决，在《欲罢不能》这本书中说过，“刷屏时代”的意义与其代表性内容。 关于视频，一般依托于某个平台，平台会记录用户的视频查看轨迹，以此计算用户对于视频浏览的喜好，之后就会推送相似的内容，然后用户就会不断的在这循环之中挣扎，视频是他人创作的作品，其作用的体现是用户时间的收割与变现。 关于游戏，就是时间收割与金钱积累，在此之上，游戏存在的本质就是为了让人上瘾的，一开始会设计一个个小的门槛，让用户通过努力后跨过门槛实现目标，然后无形中提高门槛从而让用户使用更多的时间专注于此游戏，提高游戏的游戏的活跃度，使用户深陷其中。总之，自己目前的游戏是就另有用心之人设计来专门让用户上瘾的，而自己常常会跳入这个循环之中。 有时总是会在想，看这些东西自己是真的快乐吗？真的觉得高兴吗？如果自己真的快乐，为什么做完后却总是会让自己觉得更加骄躁，任何事情都得不到解决，反而让事情更加的处于无法挽回的状态？ 关于游戏与视频，忘记哪本书中提到过，对于过种及时性的快乐，大脑的思考很简单，想到了就会想去做，一旦开始后就难以终止，那么解决的最好的方法分别是替换与消除。我打算将此循环进行替换，在时间允许的情况下，当我产生想要玩游戏或者是打开视频网站进行娱乐的想法时，先进行十五分钟的单词学习，完全专注于单词，结束后体会学习结束后的感觉；当时间不的允许的情况，对此想法无视，如果自己存在了这样的想法说明自己走神了，没有处于专注状态，应当想办法进入专注状态。 作息习惯黑白颠倒，一方面解决关于游戏与视频的依赖，另一方面如果自己到了时间而没有睡意说明自己当天根本没有有效的使用自己的身体能量，所以无法简单的进入睡眠状态。解决方法一是在一天之内有效的消耗自己的身体与精神能量，这样自己今天做的每件事情都可能会到自己晚上的睡眠质量；二是当天要学习一定的东西，要学习古文文章，学习专业知识，晚上用于安眠使用，以此来解决对于手机的依赖感以及自己内心的不安全感。 拒绝工作与学习，自己总是会逃避，原因是其存在一定的能量消耗与思考能力，但是要意识到，看一个视频与玩一局游戏要比学习一个知识的开销要更加的大，而自己在做了这些事情之后，一般就不会再有精力进行工作与学习了。而解决此问题，自己需要换一个思路进行思考，不要去想“为了提高自己” “为了做更多的事情” “为了中华之崛起而读书” “为了赚钱” “为了强身健体” 这样不能在当前及时兑现的理由，变成更加一般的理由，“为了消耗自己的精神力与体力以便晚上能安然入睡”。自己也需要更加的强化，对于睡眠的执着，一天的有效活动是为了晚上的睡眠质量，在这个无趣的世界中，能够让自己投入的东西不多，睡眠是自己躲避一切的港湾。 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>以今日之我，攻昨日之我</p>
<h3 id="昨天我存在哪些坏习惯">昨天我存在哪些坏习惯</h3>
<ul>
<li>沉浸于用手机刷视频</li>
<li>玩手机游戏《战双》，同时听着直播</li>
<li>作息习惯黑白颠倒</li>
<li>长时间用ytb与b进行娱乐活动</li>
<li>拒绝工作与学习</li>
</ul>
<h3 id="这些习惯都是怎样开始的">这些习惯都是怎样开始的</h3>
<ul>
<li>手机游戏与视频：
  <u>原本这些时间都是应该用于学习的</u>，但是总是会以“先做一会儿这个”为理由来说服自己妥协，开始之后就不会再结束。</li>
<li>作息习惯黑白颠倒：
  每次到了应该睡觉的时候，自己都会意识到自己该做什么，但是都不会去做，总是想着先做完手头上的事情，或者是娱乐或者是工作学习，但是始终不会开始洗漱后上床睡觉。最大的阻碍就是手机，自己缺少安全感，总是不能简单的入睡，所以就总是会看会儿手机，却往往会到达凌晨自己疲惫不堪后才会入睡，由此又影响了自己第二天的生活。</li>
<li>长时间用ytb与b进行娱乐活动：
  其理由与手机游戏是一样，其本质与游戏之间也是存在一定的相似性</li>
<li>拒绝工作与学习：
  似乎拒绝工作与学习本身就会使自己产生一定的快感，所以总是会将其他的事由排在这件事情之前，从而将这件事情一直拖延。</li>
</ul>
<h3 id="思考以及解决方案">思考以及解决方案</h3>
<h4 id="思考">思考</h4>
<p>关于游戏与视频的解决，在《欲罢不能》这本书中说过，“刷屏时代”的意义与其代表性内容。
关于视频，一般依托于某个平台，平台会记录用户的视频查看轨迹，以此计算用户对于视频浏览的喜好，之后就会推送相似的内容，然后用户就会不断的在这循环之中挣扎，视频是他人创作的作品，其作用的体现是用户时间的收割与变现。
关于游戏，就是时间收割与金钱积累，在此之上，游戏存在的本质就是为了让人上瘾的，一开始会设计一个个小的门槛，让用户通过努力后跨过门槛实现目标，然后无形中提高门槛从而让用户使用更多的时间专注于此游戏，提高游戏的游戏的活跃度，使用户深陷其中。总之，自己目前的游戏是就另有用心之人设计来专门让用户上瘾的，而自己常常会跳入这个循环之中。</p>
<p><u>有时总是会在想，看这些东西自己是真的快乐吗？真的觉得高兴吗？如果自己真的快乐，为什么做完后却总是会让自己觉得更加骄躁，任何事情都得不到解决，反而让事情更加的处于无法挽回的状态？</u></p>
<h4 id="解决方案">解决方案</h4>
<p>关于游戏与视频，忘记哪本书中提到过，对于过种及时性的快乐，大脑的思考很简单，想到了就会想去做，一旦开始后就难以终止，那么解决的最好的方法分别是替换与消除。我打算将此循环进行替换，在时间允许的情况下，当我产生想要玩游戏或者是打开视频网站进行娱乐的想法时，先进行十五分钟的单词学习，完全专注于单词，结束后体会学习结束后的感觉；当时间不的允许的情况，对此想法无视，如果自己存在了这样的想法说明自己走神了，没有处于专注状态，应当想办法进入专注状态。
作息习惯黑白颠倒，一方面解决关于游戏与视频的依赖，另一方面如果自己到了时间而没有睡意说明自己当天根本没有有效的使用自己的身体能量，所以无法简单的进入睡眠状态。解决方法一是在一天之内有效的消耗自己的身体与精神能量，这样自己今天做的每件事情都可能会到自己晚上的睡眠质量；二是当天要学习一定的东西，要学习古文文章，学习专业知识，晚上用于安眠使用，以此来解决对于手机的依赖感以及自己内心的不安全感。
拒绝工作与学习，自己总是会逃避，原因是其存在一定的能量消耗与思考能力，但是要意识到，看一个视频与玩一局游戏要比学习一个知识的开销要更加的大，而自己在做了这些事情之后，一般就不会再有精力进行工作与学习了。而解决此问题，自己需要换一个思路进行思考，不要去想“为了提高自己” “为了做更多的事情” “为了中华之崛起而读书” “为了赚钱” “为了强身健体” 这样不能在当前及时兑现的理由，变成更加一般的理由，“为了消耗自己的精神力与体力以便晚上能安然入睡”。自己也需要更加的强化，对于睡眠的执着，一天的有效活动是为了晚上的睡眠质量，在这个无趣的世界中，能够让自己投入的东西不多，睡眠是自己躲避一切的港湾。</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>关于一些重要概念</title>
        <author>
            <name>zcbm</name>
        </author>
        <link href="https://zcbm009.github.io/guan-yu-yi-xie-chong-yao-gai-nian.html"/>
        <id>https://zcbm009.github.io/guan-yu-yi-xie-chong-yao-gai-nian.html</id>
            <category term="自省"/>

        <updated>2022-01-06T16:09:42+08:00</updated>
            <summary>
                <![CDATA[
                    自律，是延迟满足，自我管理，而不是像和尚一样禁欲，这样往往达不到自律的目的。 应当根据问题解决问题，分析自己目前引发问题的原因，事件触发的契机，完成过程中及结束后的感受，如何又循环触发问题的产生，如何周而复始使自己崩坏的。 快乐，存在三种，多巴胺、血清素、内腓肽都可以引起快乐，其中多巴胺产生的成本最低，而且不计来源，一般为即时快乐，如看一个视频、一段文章、一小段游戏；内腓肽产生的快乐则是努力后的快乐，即延迟快乐，如攻克了一个难题就会产生这种快乐，相对来说是一种良性快乐。 上瘾，表现形式有多种，可以是网瘾、小说上瘾、性瘾等，其产生的原因有多种，一般是与心理及感情上的缺失有关，其解决方法不能只是停留在表面上，单纯的戒除表现形式，还应该解决心理上的影响。对于我来说毫无疑问是存在瘾的，对多种东西上瘾，但是其背后主要的心理原因是逃避，对于过往记忆的逃避，对于现实的逃避，对于当前正在执行的事务的其困难性的逃避。对于其背后，我应该做的事情有这些：解决对于过往事情的看法，让自己的生活与专注目标回到现实中来，体会现实的乐趣，对于自己将要执行的事务想办法使其自己对其产生快感。 习惯，即是一个事件循环：产生执行某件事情的想法-&gt;想要获取完成事件的快感-&gt;执行任务-&gt;获得快感-&gt;想要再次执行以获取快感-&gt;执行任务….如何往复循环。如此，不管是好习惯还是坏习惯都是如此。此过程与《心经》中的“受想行识，亦复如是”有异曲同工之妙。那么如果是好习惯，即使是过度的执行，也会产生坏处，所以需要进行一定程度的限制。如果是坏习惯，那么首先就要先明确循环过程，自己的坏习惯的行为循环是怎样的，其引发的契机是怎样的，其后针对循环有两种解决方法：触发契机替换，循环打破。前者是将坏习惯的循环替换为另外一个循环，即是将坏习惯替换为其他有利于自己的习惯，其后则是完全破坏习惯培养新的习惯。 痛苦之身，当自己的心智开始追求痛苦，那么人就开始执着于痛苦。小我是自私的，是胆小且极没有安全感的，小我依赖于此存在，所以小我总是借此去寻找各种各样的东西来强化自己的存在，然后人就会沉浸于痛苦之中无法自拔。 练习，练习应该是有一定目的的，在一定的时间内完成某件事情以达到某个目标，如此练习才能体现其作用。 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><b>自律</b>，是延迟满足，自我管理，而不是像和尚一样禁欲，这样往往达不到自律的目的。</p>
<p>应当根据问题<b>解决问题</b>，分析自己目前引发问题的原因，事件触发的契机，完成过程中及结束后的感受，如何又循环触发问题的产生，如何周而复始使自己崩坏的。</p>
<p><b>快乐</b>，存在三种，多巴胺、血清素、内腓肽都可以引起快乐，其中多巴胺产生的成本最低，而且不计来源，一般为即时快乐，如看一个视频、一段文章、一小段游戏；内腓肽产生的快乐则是努力后的快乐，即延迟快乐，如攻克了一个难题就会产生这种快乐，相对来说是一种良性快乐。</p>
<p><b>上瘾</b>，表现形式有多种，可以是网瘾、小说上瘾、性瘾等，其产生的原因有多种，一般是与心理及感情上的缺失有关，其解决方法不能只是停留在表面上，单纯的戒除表现形式，还应该解决心理上的影响。<u>对于我来说毫无疑问是存在瘾的，对多种东西上瘾，但是其背后主要的心理原因是逃避，对于过往记忆的逃避，对于现实的逃避，对于当前正在执行的事务的其困难性的逃避。对于其背后，我应该做的事情有这些：解决对于过往事情的看法，让自己的生活与专注目标回到现实中来，体会现实的乐趣，对于自己将要执行的事务想办法使其自己对其产生快感。</u></p>
<p><b>习惯</b>，即是一个事件循环：产生执行某件事情的想法-&gt;想要获取完成事件的快感-&gt;执行任务-&gt;获得快感-&gt;想要再次执行以获取快感-&gt;执行任务….如何往复循环。如此，不管是好习惯还是坏习惯都是如此。此过程与《心经》中的“受想行识，亦复如是”有异曲同工之妙。那么如果是好习惯，即使是过度的执行，也会产生坏处，所以需要进行一定程度的限制。<u>如果是坏习惯，那么首先就要先明确循环过程，自己的坏习惯的行为循环是怎样的，其引发的契机是怎样的，其后针对循环有两种解决方法：触发契机替换，循环打破。前者是将坏习惯的循环替换为另外一个循环，即是将坏习惯替换为其他有利于自己的习惯，其后则是完全破坏习惯培养新的习惯。</u></p>
<p><b>痛苦之身</b>，当自己的心智开始追求痛苦，那么人就开始执着于痛苦。小我是自私的，是胆小且极没有安全感的，小我依赖于此存在，所以小我总是借此去寻找各种各样的东西来强化自己的存在，然后人就会沉浸于痛苦之中无法自拔。</p>
<p><b>练习</b>，练习应该是有一定目的的，在一定的时间内完成某件事情以达到某个目标，如此练习才能体现其作用。</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>批处理文件一</title>
        <author>
            <name>zcbm</name>
        </author>
        <link href="https://zcbm009.github.io/pi-chu-li-wen-jian-yi.html"/>
        <id>https://zcbm009.github.io/pi-chu-li-wen-jian-yi.html</id>
            <category term="Windows"/>
            <category term="SelfCheckQuestion"/>

        <updated>2021-12-02T18:33:30+08:00</updated>
            <summary>
                <![CDATA[
                    资源 https://www.bilibili.com/video/BV1Qv411q7bN?from=search&amp;seid=12643791154659857555 P1P5 P33 P3639 1、编写脚本 @echo off：在DOS窗口中不输出盘符； echo &quot;hello world&quot;：输出字符串，如果没有上一条语句则会显示盘符； pause：暂停窗口等待输入 2、命令的分类 3、用途 匹配规则删除文件；新建文件、日志等；批量创建计算机病毒 4、批处理文件的创建 1、命令模式 set /a 1+3 # /a代表算术运算，但是只能操作一次 2、文本模式&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="资源">资源</h3>
<p><a href="https://www.bilibili.com/video/BV1Qv411q7bN?from=search&amp;seid=12643791154659857555">https://www.bilibili.com/video/BV1Qv411q7bN?from=search&amp;seid=12643791154659857555</a></p>
<p>P1<del>P5  P33  P36</del>39</p>
<h3 id="资源内容">资源内容</h3>
<h4 id="p1-批处理初体验">P1 批处理初体验</h4>
<p><strong>1、编写脚本</strong></p>
<p><code>@echo off</code>：在DOS窗口中不输出盘符；</p>
<p><code>echo &quot;hello world&quot;</code>：输出字符串，如果没有上一条语句则会显示盘符；</p>
<p><code>pause</code>：暂停窗口等待输入</p>
<p><strong>2、命令的分类</strong></p>
<ul>
<li>内部命令，如<code>cls</code>、<code>ipconfig</code></li>
<li>外部命令，如java python等</li>
</ul>
<p><strong>3、用途</strong></p>
<p>匹配规则删除文件；新建文件、日志等；批量创建计算机病毒</p>
<p><strong>4、批处理文件的创建</strong></p>
<h4 id="p2-算术运算">P2 算术运算</h4>
<p><strong>1、命令模式</strong></p>
<p><code>set /a 1+3 # /a代表算术运算，但是只能操作一次</code></p>
<p><strong>2、文本模式</strong></p>
<p><code>set /a var=1+3</code> <code>echo %var%</code></p>
<p><strong>3、分组优先级修改（使用括号）</strong></p>
<h4 id="p3-重定向操作">P3 重定向操作</h4>
<p><strong>1、什么是重定向运算</strong></p>
<p>当前命令的运行结果移交到下一个命令，或者是添加到文件中</p>
<p><strong>2、命令使用</strong></p>
<p><code>&gt;</code> <code>&gt;&gt;</code> <code>&lt;</code> <code>&lt;&lt;</code> 这些内容同linux；type命令查看文本内容；</p>
<p><code>echo &quot;hello world&quot; &gt; a.txt</code> <code>type a.txt</code></p>
<p><code>&lt;</code> <code>&gt;</code>还可以用于关系运算</p>
<h4 id="p4-多命令运算">P4 多命令运算</h4>
<p>**1、&amp;&amp;**：执行完第一个命令后执行第二个命令，具有短路特性，如果第一个命令没有执行成功则第二个不会执行</p>
<p>**2、||**：无论第一个命令是否成功，都会执行第二个命令，具有短路特性，如果第一个命令执行成功则第二个命令不会执行</p>
<p>这两个命令并非与<code>linux</code>中的管道命令对应</p>
<h4 id="p5-管道符号">P5 管道符号</h4>
<p><code>|</code>：第一个命令的输出作为第二命令的输入，如<code>netstat -ano | findstr :8080</code></p>
<h4 id="p33-if-else">P33 if-else</h4>
<pre><code class="language-bat">@echo off
rem &quot;if-else内容输出&quot;
set v=hello
if %v%==hello (echo yes) else (echo no)
rem &quot;取消&#39;请按任意键继续&#39;文本提示&quot;
pause&gt;nil
</code></pre>
<h4 id="p36-循环遍历文件夹名称">P36 循环遍历文件夹名称</h4>
<pre><code class="language-bat">@echo off
rem &quot;for test&quot;
rem &quot;/d代表遍历文件夹，*代表当下目录下的所有文件，%%a代表将文件夹的名称赋值给变量a，如果是在控制台中输出变量则只需要一个%，两个%在批处理文件中是为了转义&quot;
for /d %%a in (*) do echo %a%
pause&gt;nil
</code></pre>
<h4 id="p37-遍历目录与子目录下的文件">P37 遍历目录与子目录下的文件</h4>
<pre><code class="language-bat">@echo off
rem &quot;/r代表搜索目标文件及其子目录下的文件，其后跟目标目录，%%v代表将目标内容赋值给变量v，()内内容代表目录下子文件的匹配规则，这里代表的是遍历cch目录下及其子目录下所有的java文件，将文件名称赋值给变量v&quot;
for /r &quot;C:\Users\Administrator\Desktop\cch&quot; %%v in (*.java) do echo %v%
pause&gt;nil
</code></pre>
<h4 id="p38-遍历数字操作">P38 遍历数字操作</h4>
<pre><code class="language-bat">@echo off
rem &quot;for /L %%v in (start,step,end)，/L不区分大小写，但是小写L容易造成歧义，降低可读性&quot;
for /L %%v in (1,2,10) do echo %v%
pause&gt;nil
</code></pre>
<h4 id="p39-遍历文件内容">P39 遍历文件内容</h4>
<pre><code class="language-bat">@echo off
rem &quot;使用/F，()内为匹配的目标文件，不需要加引号操作&quot;
for /F %%v in (C:\Users\Administrator\Desktop\cch\Solution.java) do echo %v%
pause&gt;nil
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>DOCKER--镜像与容器操作--复习一</title>
        <author>
            <name>zcbm</name>
        </author>
        <link href="https://zcbm009.github.io/docker-jing-xiang-yu-rong-qi-cao-zuo-fu-xi-yi.html"/>
        <id>https://zcbm009.github.io/docker-jing-xiang-yu-rong-qi-cao-zuo-fu-xi-yi.html</id>
            <category term="SelfCheckQuestion"/>
            <category term="Docker"/>
            <category term="Book"/>

        <updated>2021-12-02T17:02:28+08:00</updated>
            <summary>
                <![CDATA[
                    基础概念 容器化技术 Docker是容器技术中的佼佼者。 虚拟化可以通过硬件模拟来实现，也可以通过操作系统软件来实现，而容器技术则利用操作系统本身的机制与特性，实现远超传统虚拟化的轻量级虚拟化。 虚拟化（virtualization）技术是一个通用的概念，在不同领域有不同的理解。在计算领域，一般指的是计算虚拟化（computing virtualization），或通常说的服务器虚拟化。 虚拟化的核心是对资源的抽象，目标往往是为了在同一个主机上同时运行多个系统或应用，从而提高系统资源的利用率，并且带来降低成本、方便管理和容错容灾等好处。 从大类上分，虚拟化技术可分为基于硬件的虚拟化和基于软件的虚拟化； 基于软件的虚拟化从对象所在的层次，又可以分为应用虚拟化和平台虚拟化（完全虚拟化、硬件辅助虚拟化、部分虚拟化、超虚拟化、操作系统虚拟化–Docker就是属于这类，操作系统虚拟化最大的特点就是不需要额外的supervisor支持）。 传统方式是在硬件层面实现虚拟化，需要有额外的虚拟机管理应用和虚拟机操作系统层（这里有个传统虚拟化与Docker虚拟化的对比图）。Docker容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，因此更加轻量级。 容器化技术与虚拟化技术之间就像这样一个关系：中国与其他国家在中国创建的大使馆（虚拟化技术），中国与内蒙古自治区、香港澳门台湾一国两制（容器化技术）。 基于Go语言实现的开源容器项目； 诞生于2013年年初，发起者是dotCloud公司，拥有众多相关开源组件项目，逐渐生成了围绕Docker容器的完整生态体系，2013年改名为DockerInc，并专注于Docker相关技术与产品的开发，目前已经成为全球最大的Docker容器服务提供商，官方网站为docker.com。 Docker项目代码开源在Github上，遵循Apache 2.0协议。 Docker的构想是要实现“Build, Ship and Run Any App, Anywhere”，即通过对应用的封装（Packaging）、分发（Distribution）、部署（Deployment）、运行（Runtime）生命周期进行管理，达到应用组件级别的“一次封装，到处运行”。这里的应用组件，既可以是一个Web应用、一个编译环境，也可以是一套数据库平台服务，甚至是一个操作系统或集群。 Linux容器（Linux&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="基础概念">基础概念</h3>
<h4 id="容器化技术">容器化技术</h4>
<hr>
<p>Docker是容器技术中的佼佼者。</p>
<hr>
<h4 id="虚拟化技术">虚拟化技术</h4>
<hr>
<h5 id="虚拟化与容器技术之间的区别">虚拟化与容器技术之间的区别</h5>
<p>虚拟化可以通过硬件模拟来实现，也可以通过操作系统软件来实现，而容器技术则利用操作系统本身的机制与特性，实现远超传统虚拟化的轻量级虚拟化。</p>
<h5 id="什么是虚拟化技术">什么是虚拟化技术</h5>
<p>虚拟化（virtualization）技术是一个通用的概念，在不同领域有不同的理解。在计算领域，一般指的是计算虚拟化（computing virtualization），或通常说的服务器虚拟化。</p>
<p>虚拟化的核心是对资源的抽象，目标往往是为了在同一个主机上同时运行多个系统或应用，从而提高系统资源的利用率，并且带来降低成本、方便管理和容错容灾等好处。</p>
<h5 id="虚拟化技术的分类">虚拟化技术的分类</h5>
<p>从大类上分，虚拟化技术可分为基于硬件的虚拟化和基于软件的虚拟化；</p>
<p>基于软件的虚拟化从对象所在的层次，又可以分为应用虚拟化和平台虚拟化（完全虚拟化、硬件辅助虚拟化、部分虚拟化、超虚拟化、操作系统虚拟化–Docker就是属于这类，操作系统虚拟化最大的特点就是不需要额外的supervisor支持）。</p>
<p>传统方式是在硬件层面实现虚拟化，需要有额外的虚拟机管理应用和虚拟机操作系统层（这里有个传统虚拟化与Docker虚拟化的对比图）。Docker容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，因此更加轻量级。</p>
<h5 id="自评">自评</h5>
<p>容器化技术与虚拟化技术之间就像这样一个关系：中国与其他国家在中国创建的大使馆（虚拟化技术），中国与内蒙古自治区、香港澳门台湾一国两制（容器化技术）。</p>
<hr>
<h4 id="docker的发展历史">Docker的发展历史</h4>
<hr>
<p>基于Go语言实现的开源容器项目；</p>
<h5 id="开发商的发展">开发商的发展</h5>
<p>诞生于2013年年初，发起者是<code>dotCloud</code>公司，拥有众多相关开源组件项目，逐渐生成了围绕Docker容器的完整生态体系，2013年改名为<code>DockerInc</code>，并专注于Docker相关技术与产品的开发，目前已经成为全球最大的Docker容器服务提供商，官方网站为docker.com。</p>
<p>Docker项目代码开源在<code>Github</code>上，遵循Apache 2.0协议。</p>
<h5 id="docker理念">Docker理念</h5>
<p>Docker的构想是要实现“Build, Ship and Run Any App, Anywhere”，即通过对应用的封装（Packaging）、分发（Distribution）、部署（Deployment）、运行（Runtime）生命周期进行管理，达到应用组件级别的“一次封装，到处运行”。这里的应用组件，既可以是一个Web应用、一个编译环境，也可以是一套数据库平台服务，甚至是一个操作系统或集群。</p>
<h5 id="支撑技术的发展">支撑技术的发展</h5>
<p>Linux容器（Linux Containers, LXC）技术。IBM <code>DeveloperWorks</code>网站关于容器技术的描述十分准确：“容器有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。与虚拟化相比，这样既不需要指令级模拟，也不需要即时编译。容器可以在核心CPU本地运行指令，而不需要任何专门的解释机制。此外，也避免了准虚拟化（para-virtualization）和系统调用替换中的复杂性。”（从小圈子使用到成为Linux系统轻量级容器技术的事实标准。）</p>
<p>在LXC的基础上，Docker提供了各种容器管理工具，让用户无须关注底层操作，引入分层文件系统构建和高效的镜像机制，降低了迁移难度；自0.9版本开始，Docker开发了libcon-tainer项目作为更广泛的容器驱动实现，从而替<u>换掉了LXC的实现</u>。Docker还积极推动成立了runC标准项目，并贡献给开放容器联盟，试图让容器的支持不再局限于Linux操作系统，而是更安全、更开放、更具扩展性。</p>
<hr>
<h4 id="docker的三大内容">Docker的三大内容</h4>
<h5 id="docker的三大内容都是哪些，简单概括一下">Docker的三大内容都是哪些，简单概括一下</h5>
<p>三大内容有镜像、容器、仓库。</p>
<p>镜像有几大点：静态只读、创建容器、可以包含操作系统及依赖于此的应用程序；</p>
<p>容器有几大点：运行与隔离应用、容器之间可以通过网络互相访问；</p>
<p>仓库有几大点：注册中心与Docker创建之间的关系、公有仓库与私有仓库；</p>
<h5 id="镜像">镜像</h5>
<p><u>首先回答基本命令：镜像的增、删、改、查</u></p>
<p><strong>常用命令一</strong></p>
<p><u>添加</u>（获取）镜像的命令：docker pull imageName；</p>
<p>镜像名称的组成：仓库名称+标签；</p>
<p>镜像重名：同一个仓库中重名则根据版本号来区分，如果不同仓库则根据仓库ip地址来区分，不写标签会默认从DockerHub中获取最新版本的镜像；</p>
<p><del>镜像的内容与组成：镜像由若干层组成，唯一id</del></p>
<p>公有仓库与私有仓库：前者是DockerHub提供的仓库，另外还可以在当前局域网中创建自己的Docker仓库，这点类似于Github。</p>
<p><strong>常用命令二</strong></p>
<p><strong>查</strong>看已有的镜像的基本信息：docker images/docker image ls;</p>
<p>可以查看的基本信息有：name tag size image-id created;</p>
<p>查看帮助文件：man docker-images;</p>
<p><strong>常用命令三</strong></p>
<p>为镜像添加别名：docker tag oldName newName，添加别名结果可从docker images 查看；</p>
<p><em>这个命令类似windows的桌面快捷方式，linux的link文件，git的提交内容版本标签</em></p>
<p><strong>常用命令四</strong></p>
<p>查看一个镜像的详细信息：docker inspect imageName；</p>
<p>查看一个镜像历史信息：docker history imageName；</p>
<p><strong>常用命令五</strong></p>
<p>从仓库中<u>搜索</u>镜像：docker search imageName；</p>
<p><strong>常用命令六</strong></p>
<p><u>删除</u>镜像：docker rmi id/tag–如果是镜像id则会先删除镜像相关的标签，然后再删除镜像，如果是标签的话则就会直接删除标签，镜像不会产生影响；</p>
<p><em>在删除镜像前，会先查看是否存在与镜像对应的容器，如果存在可以使用-f关键字强制删除镜像，否则就只能删除容器后再执行镜像删除操作</em></p>
<p>删除临时镜像的遗留文件：docker prune；</p>
<p><strong>常用命令七</strong></p>
<p>创建镜像的三种方法：基于（已有镜像的）容器创建、基于本地模板导入、基于Dockerfile创建。</p>
<p><u><em>主要用途是基于当前环境创建镜像并进行环境迁移，以及上传镜像到仓库中</em></u></p>
<h5 id="容器">容器</h5>
<p><em>需要掌握有容器的增、删、改、查相关命令</em></p>
<p><strong>常用命令一</strong></p>
<p>创建一个容器：<code>docker create imageName</code></p>
<p>创建容器需要基于镜像；创建后的容器处于停止状态，需要运行其他命令来运行；</p>
<p><strong>常用命令二</strong></p>
<p>运行一个容器：<code>docker start container</code></p>
<p>运行创建的容器</p>
<p><strong>常用命令三</strong></p>
<p>创建并运行一个容器：<code>docker run imageName</code></p>
<p>添加参数<code>-d</code>则创建一个在后台运行的容器；</p>
<p>如果命令存在可以输入窗口（如bash），则可以添加参数<code>-it</code>保持输入端打开并监听其输入内容；</p>
<p>是前面两个命令的结合，其中有详细的过程，<u>以后需要将此过程详细的说明出来</u></p>
<p><strong>常用命令四</strong></p>
<p>查看正在运行的容器：<code>docker ls/ps</code></p>
<p><strong>常用命令五</strong></p>
<p>获取容器的输出信息：<code>docker logs</code></p>
<p><strong>常用命令六</strong></p>
<p>容器的暂停与开始：<code>docker pause/unpause container</code></p>
<p>可以通过pause来暂停容器，处于停止状态的容器可以通过unpause来重新运行容器</p>
<p><strong>常用命令七</strong></p>
<p>容器的停止：<code>docker stop container</code></p>
<p>容器停止的过程：先向容器发送一个SIGTERM信号，十秒后发送一个SINKILL信号，然后容器进入停止状态，也只可以使用<code>docker kill container</code>命令直接发送一个Kill信息给容器；</p>
<p>容器进入停止状态的可能情况：容器正常运行结束，使用命令，使用ctrl+d或exit退出容器；</p>
<p>容器处于停止状态时可以再使用start命令来重新运行；</p>
<p><strong>常用命令八</strong></p>
<p>删除处于停止状态的容器：<code>docker prune</code></p>
<p><strong>常用命令九</strong></p>
<p>重启容器：<code>docker restart container</code></p>
<p>先使容器进入停止状态，再使重新启动容器</p>
<p><strong>常用命令十</strong></p>
<p>进入处于的容器：<code>docker attach container</code> <code>docker exec container</code></p>
<p>前者可以维持一个输入窗口来与容器交互，但是多个窗口与容器的交互是相同的，所以当一个窗口处于阻塞状态时其他窗口也处于阻塞状态；后者则没有前面的问题，可以直接输入命令运行，可以使用（-it）运行一个伪终端与容器交互。</p>
<p><strong>常用命令十一</strong></p>
<p>删除一个容器：<code>docker rm container</code></p>
<p>为了与镜像操作区分，使用了<code>rm</code>，而镜像使用了<code>rmi</code>，意为rm image；</p>
<p>默认只能删除处于停止或者退出状态的容器，但是可以使用参数<code>-f</code>参数强制删除容器。</p>
<p><strong>常用命令十二</strong></p>
<p>查看容器信息：<code>docker inspect container</code> <code>docker top container</code> <code>docker stats container</code></p>
<p>这些命令都与linux系统的部分命令类似</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>自卑与超越一</title>
        <author>
            <name>zcbm</name>
        </author>
        <link href="https://zcbm009.github.io/zi-bei-yu-chao-yue-yi.html"/>
        <id>https://zcbm009.github.io/zi-bei-yu-chao-yue-yi.html</id>
            <category term="Book"/>

        <updated>2021-11-24T16:00:59+08:00</updated>
            <summary>
                <![CDATA[
                    译者序 1、阿德勒与弗洛伊德心理学 2、个体心理学，自卑情节 3、面对困难应该如何处理自卑 4、阿德勒的童年 5、这本书讲述了什么内容 1、阿德勒在早年的学说理念与弗洛伊德心理学发生分歧，于是退出 2、阿德勒离开弗洛伊德后自创个体心理学，成为其创始人；自卑情节是指人在面对困境时而产生的一种无能为力等负面情感。 3、我们会遇到很多困难，但是困难本身并不应该成为我们自卑的理由。而自卑正是造成失败的原因。困难-&gt;自卑-&gt;失败-&gt;自卑-&gt;失败，如何周而复始，事情永远不可能成功，所以我们应该克服自卑，让自己的心理强大起来，才能够走向成功。而阿德勒在本书中就是做这么一件事情 4、此人幼年患病，长期得不到家人、朋友的关爱，但是随着成长，此人以自己的缺陷为动力，激励自己，而不因其自卑，因此才会有今天的成就。 5、此人基于自己的童年以及经历讲述了对于自卑的看法，以及生命中各种各样的事物的看法。希望孩子在童年时即可树立正确的观念，免受自卑情绪的困扰。 问题：生活的意义是什么；生活的意义与自卑之间有怎样的关系，为什么作者会先讲生活的意义 我们都生活在意义的领域中，人的一生不仅仅是经历事物本身，更为重要的是体会事物在生活中的意义。 人不会让“生活的意义是什么”这类近乎无意义的问题来困扰自己，所以在一般情况下，人只有在遇到巨大挫折时才会发出这样的疑问。 人类只会通过自己的行为来诠释他所认为的生活的意义。 现代人似乎很明白自己的追求，但事实上他所追求的不过是别人期望他去追求的东西罢了。 不是去为生活下定义（或许这本身是一个近乎无意义的问题），而是通过观察一个人而得出这个人对于生活的定义 生活的意义有多种多样的表现形式，这是因为生活对于每个人来说都是不同的。它有高有低有好有坏，而我们总结出了应对所有现实情况的生活意义，它便是真正意义的共同尺度。 每个个体都必须要面对的三个重要的事实。我们无法脱离地球及其本身提供的资源；在地球上，我们并不是人类种族的唯一成员，与我们同在的还有其他人，我们在有生之年，或多或少都会与他们发生关联；人类有性别之分，每一个男人或每一个女人都无法回避爱情和婚姻这样的关系，而这种关系无疑也是建立在这一事实基础之上的。 三个不容回避的问题：怎样谋取一份可以让我们生存下去的职业；为了使我们在互惠互利的基础上进行合作并分享其快乐，如何在同类中得到不可动摇的地位（社会）；为了适应“两种性别的客观存在”以及“人类的繁衍生息依赖于爱情”这样的事实，我们应该如何调节自身行为（性别）。 每个个体对生活意义的深刻体会都是通过个人针对这些问题所做出的各种反应而体现出来。 真正的意义，只有在与他人产生联系的时候才切实地存在，个人所认为的“意义”，实际上是虚幻缥缈的。因此，我们所有的行为及想要达到的某些目的也是同样的道理，我们对他人的意义才是我们唯一的意义。 每个个体都要面对三个事实，而基于这三个事实所衍生出来的三个方面的问题（职业、社会、性别），人类个体对于这三个方面的体现则代表此人对于生活意义的理解与体会。&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="译者序">译者序</h3>
<p>1、阿德勒与弗洛伊德心理学</p>
<p>2、个体心理学，自卑情节</p>
<p>3、面对困难应该如何处理自卑</p>
<p>4、阿德勒的童年</p>
<p>5、这本书讲述了什么内容</p>
<hr>
<p>1、阿德勒在早年的学说理念与弗洛伊德心理学发生分歧，于是退出</p>
<p>2、阿德勒离开弗洛伊德后自创个体心理学，成为其创始人；自卑情节是指人在面对困境时而产生的一种无能为力等负面情感。</p>
<p>3、我们会遇到很多困难，但是困难本身并不应该成为我们自卑的理由。而自卑正是造成失败的原因。困难-&gt;自卑-&gt;失败-&gt;自卑-&gt;失败，如何周而复始，事情永远不可能成功，所以我们应该克服自卑，让自己的心理强大起来，才能够走向成功。而阿德勒在本书中就是做这么一件事情</p>
<p>4、此人幼年患病，长期得不到家人、朋友的关爱，但是随着成长，此人以自己的缺陷为动力，激励自己，而不因其自卑，因此才会有今天的成就。</p>
<p>5、此人基于自己的童年以及经历讲述了对于自卑的看法，以及生命中各种各样的事物的看法。希望孩子在童年时即可树立正确的观念，免受自卑情绪的困扰。</p>
<hr>
<h3 id="第一章-生活的意义">第一章 生活的意义</h3>
<p>问题：生活的意义是什么；生活的意义与自卑之间有怎样的关系，为什么作者会先讲生活的意义</p>
<h4 id="第一段">第一段</h4>
<p>我们都生活在意义的领域中，人的一生不仅仅是经历事物本身，更为重要的是<u>体会事物在生活中的意义</u>。</p>
<p>人不会让“生活的意义是什么”这类近乎无意义的问题来困扰自己，所以在一般情况下，人只有在遇到巨大挫折时才会发出这样的疑问。</p>
<p>人类只会通过自己的行为来诠释他所认为的生活的意义。</p>
<p>现代人似乎很明白自己的追求，但事实上他所追求的不过是别人期望他去追求的东西罢了。</p>
<hr>
<p>不是去为生活下定义（或许这本身是一个近乎无意义的问题），而是通过观察一个人而得出这个人对于生活的定义</p>
<hr>
<h4 id="第二、三、四段">第二、三、四段</h4>
<p>生活的意义有多种多样的表现形式，这是因为生活对于每个人来说都是不同的。它有高有低有好有坏，而我们总结出了应对所有现实情况的生活意义，它便是真正意义的共同尺度。</p>
<p>每个个体都必须要面对的三个重要的事实。我们无法脱离地球及其本身提供的资源；在地球上，我们并不是人类种族的唯一成员，与我们同在的还有其他人，我们在有生之年，或多或少都会与他们发生关联；人类有性别之分，每一个男人或每一个女人都无法回避爱情和婚姻这样的关系，而这种关系无疑也是建立在这一事实基础之上的。</p>
<p>三个不容回避的问题：怎样谋取一份可以让我们生存下去的<u>职业</u>；为了使我们在互惠互利的基础上进行合作并分享其快乐，如何在同类中得到不可动摇的地位（社会）；为了适应“两种性别的客观存在”以及“人类的繁衍生息依赖于爱情”这样的事实，我们应该如何调节自身行为（性别）。</p>
<p>每个个体对生活意义的深刻体会都是通过个人针对这些问题所做出的各种反应而体现出来。</p>
<p>真正的意义，只有在与他人产生联系的时候才切实地存在，个人所认为的“意义”，实际上是虚幻缥缈的。因此，我们所有的行为及想要达到的某些目的也是同样的道理，我们对他人的意义才是我们唯一的意义。</p>
<hr>
<p>每个个体都要面对三个事实，而基于这三个事实所衍生出来的三个方面的问题（职业、社会、性别），人类个体对于这三个方面的体现则代表此人对于生活意义的理解与体会。</p>
<p>真正的意义，只有在与他人产生联系的时候才切实地存在，我们对他人的意义才是我们唯一的意义。</p>
<hr>
<h4 id="第五段">第五段</h4>
<p>单独个体的意义是经不起任何考验的。</p>
<p>真正的“生活意义”是有标准的：它们一定是所有人都能够共同享有的，是共同的意义，是可以被很多人确定为有效的意义。生活的意义在于个人为团体所贡献的力量。</p>
<p>生活的真正意义就在于引发别人的关注和兴趣，并与他人进行互惠合作。这些人有一个共同点：他们的行为会被同伴的兴趣所影响，每当他遇到挫折时，<u>都会找到最合适的方法，那就是避免和他人发生利益上的正面冲突。</u></p>
<p>不能自发地作为，不能表达一个人真正的感觉与想法，以及因此而必须做作虚伪，这些都是感到自卑与懦弱的根本致因。</p>
<h4 id="第六段">第六段</h4>
<p>我们看到了祖先对我们的幸福生活所做的贡献。而那些并不懂得如何贡献力量并互助合作的人，又给了我们什么呢？他们只会逃避生活，回首往事的时候，也看不到丝毫自己留下的痕迹。因此，我们可以说他们的死亡是彻底的，他们的生命历程是苍白的。</p>
<p>我们赋予生活的意义正确与否，带来的结果将会有天壤之别。</p>
<p>了解这些意义的形成过程，充分了解它们之间的区别并在它们产生重大偏差时能够及时纠正。对“生活意义”的研究和探索从我们降临到这个世界时就开始了；一个人的童年对其“生活意义”会产生不同的影响；“生活意义”取决于我们所处的环境，我们则以个人赋予环境的意义决定自己；从广义上讲，出生只是生的开始。个人的整个一生不是别的而是自己不断诞生的过程。</p>
<h4 id="第七段">第七段</h4>
<p>一个人童年所处的环境却非常容易孕育出具有严重错误的“生活意义”。</p>
<p>父爱应该使孩子对自身的力量和能力产生越来越大的自信心，最后能使孩子成为自己的主人，从而能够脱离父亲的权威。</p>
<h4 id="第八段">第八段</h4>
<p>生理缺陷、被溺爱、被冷落，都容易让人产生错误的“生活意义”。</p>
<p>要想清楚地了解一个人赋予自己的生活什么样的意义，最好的途径就是记忆。每一段记忆都可以代表某一件令人回味的往事，无论这一段记忆是多么短暂。一个人之所以会回想一件事，是因为这件事在他生命中所占的位置至关重要。</p>
<p>为什么早期的记忆如此重要。</p>
<p>当我们了解一个人赋予生活的意义之后，便可以自然而然地了解他（她）的整个人格。如果没法找到错误的症结所在，再多的讨论和治疗也都是徒劳的，唯一有效的方式是找到方法让他们勇敢地正视生活。</p>
<p>我们应该这样认为：我们是自己的主人，我们一定要开拓新的生活，我们有能力这样做，同时，这也是我们应尽的责任</p>
<h4 id="得到的东西">得到的东西</h4>
<h3 id="第二章-心灵与肉体">第二章 心灵与肉体</h3>
<h4 id="关键字">关键字</h4>
<p>目标 限度 方向；看清本质 分解；心灵的支配与帮助 身体的舒适 战胜困难 感情；<strong>目标</strong> 感情 生活方式 个体发展；感情的成长与发展  既定目标 方向和程度 躲避 征服快感；情绪的格调；不恰当的生活方式与优越感 引发 状况 不会关心 等待被关心。</p>
<hr>
<p>目标-&gt;心灵与身体-&gt;感情-&gt;情绪的格调-&gt;性和爱情</p>
<hr>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Java基础测试</title>
        <author>
            <name>zcbm</name>
        </author>
        <link href="https://zcbm009.github.io/javaji-chu-ce-shi.html"/>
        <id>https://zcbm009.github.io/javaji-chu-ce-shi.html</id>
            <category term="SelfCheckQuestion"/>
            <category term="JAVA"/>

        <updated>2021-11-24T16:00:17+08:00</updated>
            <summary>
                <![CDATA[
                    资源：JavaGuide Java基础 面向对象与面向过程的区别 Java语言有哪些特点 关于JVM、JDK、JRE最详细通俗的解答 OracleJDK与OpenJDK的对比 Java与C++的区别 字符型常量与字符串常量的区别 构造器Constructor是否可被重载或重写 重载与重写的区别 Java面向对象的三大特性进行解释 String、StringBuffer、StringBuilder的区别是什么?String类为什么是不可变的 自动装箱与拆箱 在一个静态方法内调用一个非静态成员为什么是非法的 在Java中定义一个不做事且没有参数的构造方法的作用 接口与抽象类的区别是什么 成员变量与局部变量的区别有哪些 创建一个对象用什么运算符？对象实体与对象引用有何不同 什么是方法的返回值，返回值在类的方法里的作用是什么 一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么 构造方法有哪些特性 静态方法忹实例方法有何不同 对象的相等与指向他们的引用相等，两者有什么不同&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>资源：JavaGuide</p>
<h2 id="java基础">Java基础</h2>
<ol>
<li>面向对象与面向过程的区别</li>
<li>Java语言有哪些特点</li>
<li>关于JVM、JDK、JRE最详细通俗的解答</li>
<li>OracleJDK与OpenJDK的对比</li>
<li>Java与C++的区别</li>
<li>字符型常量与字符串常量的区别</li>
<li>构造器Constructor是否可被重载或重写</li>
<li>重载与重写的区别</li>
<li>Java面向对象的三大特性进行解释</li>
<li>String、StringBuffer、StringBuilder的区别是什么?String类为什么是不可变的</li>
<li>自动装箱与拆箱</li>
<li>在一个静态方法内调用一个非静态成员为什么是非法的</li>
<li>在Java中定义一个不做事且没有参数的构造方法的作用</li>
<li>接口与抽象类的区别是什么</li>
<li>成员变量与局部变量的区别有哪些</li>
<li>创建一个对象用什么运算符？对象实体与对象引用有何不同</li>
<li>什么是方法的返回值，返回值在类的方法里的作用是什么</li>
<li>一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么</li>
<li>构造方法有哪些特性</li>
<li>静态方法忹实例方法有何不同</li>
<li>对象的相等与指向他们的引用相等，两者有什么不同</li>
<li>在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是什么</li>
<li><strong>==与equals</strong></li>
<li><strong>hashCode与equals</strong></li>
<li>为什么Java中只有值的传递</li>
<li>简述线程、程序、进程的基本概念，以及他们之间的关系是什么</li>
<li>线程有哪些基本状态</li>
<li>关于final关键字的一些总结</li>
<li>Java中的异常处理<ol>
<li>Java异常类层次结构图</li>
<li>Throwable类常用方法</li>
<li>异常处理总结</li>
</ol>
</li>
<li>Java序列化中如果有些字段不想进行序列化，怎么办</li>
<li>获取用键盘输入常用的两种方法</li>
<li>Java中IO流<ol>
<li>Java中IO流分为几种</li>
<li>既然有了字节流，为什么还要字符流</li>
<li>BIO、AIO、NIO有什么区别</li>
</ol>
</li>
<li>深拷贝与浅拷贝</li>
</ol>
<h2 id="java集合">Java集合</h2>
<ol>
<li>说说List，Set，Map三者之间的区别</li>
<li>Arraylist与LinkedList的区别<ol>
<li>双向链表与循环链表</li>
<li>RandomAccess接口</li>
</ol>
</li>
<li>ArrayList与Vector区别？为什么要用Vector来取代Vector</li>
<li>关于ArrayList的扩容机制</li>
<li>HashMap与HashTable的区别</li>
<li>HashMap与HashSet的区别</li>
<li>HashSet如何检查重复</li>
<li>HashMap的底层实现<ol>
<li>Jdk1.8之前</li>
<li>jdk1.8之后</li>
</ol>
</li>
<li>HashMap的长度为什么是2的幂次方</li>
<li>HashMap多线程操作导致死循环问题</li>
<li>ConcurrentHashMap与HashTable的区别</li>
<li>ConcurrentHashMap线程安全的具体实现方式<ol>
<li>jdk1.7</li>
<li>jdk1.8</li>
</ol>
</li>
<li>比较HashSet、LinkedHashSet与TreeSet三者的异同</li>
<li>集合框架底层数据结构的总结<ol>
<li>List</li>
<li>Set</li>
<li>Map</li>
</ol>
</li>
<li>如何选用集合</li>
</ol>
<h2 id="多线程">多线程</h2>
<ol>
<li>什么是线程与进程<ol>
<li>线程与进程的解释</li>
<li>在不同的编程语言中线程是如何表示的</li>
</ol>
</li>
<li>进程与线程之间的关系，区别及优缺点<ol>
<li>图解进程与线程之间的关系</li>
<li>程序计数器为什么是私有的</li>
<li>虚拟机栈与本地方法栈为什么是私有的</li>
<li>说说堆与方法区</li>
</ol>
</li>
<li>并行与并发的区别</li>
<li>为什么要使用多线程</li>
<li>使用多线程可能带来什么问题</li>
<li>说说线程的 生命周期与状态</li>
<li>什么是上下文切换</li>
<li>什么是线程死锁，如何避免死锁<ol>
<li>认识线程死锁</li>
<li>如何避免死锁</li>
</ol>
</li>
<li>说说Sleep方法与wait方法的区别与共同点</li>
<li>为什么我们调用start方法时会执行run方法，为什么我们不能直接调用run方法</li>
<li>说一说自己对于synchronized关键字的了解</li>
<li>说说自己是怎么使用synchronized关键字</li>
<li>构造方法可以使用synchronized关键字修饰吗</li>
<li>讲一下synchronized关键字的底层原理<ol>
<li>synchronized同步语句块的情况</li>
<li>修饰方法的情况</li>
</ol>
</li>
<li>为什么要搞一个CPU高速缓存</li>
<li>讲一下JMM（Java内存模型）</li>
<li>说说synchronized关键字与voliatile关键字的区别</li>
<li>ThreadLocal了解吗</li>
<li>ThreadLocal原理讲一下</li>
<li>阐述ThreadLocal内存泄露问题</li>
<li>线程池<ol>
<li>为什么要用线程池</li>
<li>实现Runnable接口和Callable接口的区别</li>
<li>执行execute方法与submit方法的区别是什么</li>
<li>如何创建线程池</li>
<li>ThreadPoolExecutor类分析<ol>
<li>ThreadPoolExecutor构造函数的重要参数分析</li>
<li>饱和策略</li>
</ol>
</li>
<li>线程池原理分析</li>
</ol>
</li>
<li>介绍一下Atomic原子类</li>
<li>JUC包中的原子类是哪四类</li>
<li>AQS基本内容</li>
<li>AQS原理了解吗<ol>
<li>原理概览</li>
<li>AQS对资源的共享方式</li>
<li>AQS底层使用了模板方法模式</li>
</ol>
</li>
<li>AQS组件</li>
<li>关于CountDownLatch及其使用场景</li>
</ol>
<h2 id="jvm">JVM</h2>
<ol>
<li>介绍下Java内存区域（运行时区域）</li>
<li>说一下Java对象的创建过程</li>
<li>对象的访问定位有哪两种方式</li>
<li>简单聊聊JVM内存分配与回收</li>
<li>说一下堆内存中对象的分配的基本策略</li>
<li>如何判断对象已死</li>
<li>简单介绍一下强引用、软引用、弱引用、虚引用</li>
<li>如何判断一个常量是废弃常量</li>
<li>如何判断一个类是一个无用的类</li>
<li>垃圾收集有哪些算法，各自的特点是什么</li>
<li>HotSpot为什么要分为新生代与老年代</li>
<li>常见的垃圾回收器有哪些</li>
</ol>

            ]]>
        </content>
    </entry>
    <entry>
        <title>英语单词四</title>
        <author>
            <name>zcbm</name>
        </author>
        <link href="https://zcbm009.github.io/ying-yu-dan-ci-si.html"/>
        <id>https://zcbm009.github.io/ying-yu-dan-ci-si.html</id>
            <category term="English"/>

        <updated>2021-11-24T15:59:17+08:00</updated>
            <summary>
                <![CDATA[
                     单词 意思 词性 应用 barracks abide erode flat ponder ignite asset decent recipe premier casual severe cult propel authorize instruct lure genuine&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <table>
<thead>
<tr>
<th>单词</th>
<th>意思</th>
<th>词性</th>
<th>应用</th>
</tr>
</thead>
<tbody><tr>
<td>barracks</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>abide</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>erode</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>flat</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ponder</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ignite</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>asset</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>decent</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>recipe</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>premier</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>casual</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>severe</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>cult</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>propel</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>authorize</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>instruct</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>lure</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>genuine</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>emergency</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>

            ]]>
        </content>
    </entry>
    <entry>
        <title>当下的力量 2-2 瓦解你的痛苦</title>
        <author>
            <name>zcbm</name>
        </author>
        <link href="https://zcbm009.github.io/dang-xia-de-li-liang-2-2-wa-jie-ni-de-tong-ku.html"/>
        <id>https://zcbm009.github.io/dang-xia-de-li-liang-2-2-wa-jie-ni-de-tong-ku.html</id>
            <category term="Book"/>

        <updated>2021-11-24T15:58:15+08:00</updated>
            <summary>
                <![CDATA[
                    关键字 痛苦之身 无意识 思维认同与情绪认同 临在 以下非标准答案，是自己第一次阅读此章节后的解答，每一次阅读都应该有不同的解答，或者推翻前一次答案，获得新的东西 1、痛苦之身是存在于体内的一个能量场，它是当下体会到的情绪痛苦的残留以及过往所有痛苦的集合。它像存在一定的意识，可以在意志薄弱时占据思维、控制身体、破坏生活，去做出伤害自己与他人的行为，产生更多的痛苦，进而强化其存在。 2、痛苦之身有两种存在模式，休眠与激活。可能对于一些人来说它一直存在于休眠状态，但是它很容易通过一些特定环境进入激活状态，这时人可能就会进入消极状态甚至做出一些与平常完全不同的行为。 3、痛苦之身对我们生活的影响有时很小，有时又巨大。当它控制了我们的思维后，我们很容易对其产生无意识的认同，进而追求更多的痛苦，如果不将意识带入痛苦之中，发现痛苦之身的存在，那么人很容易这样的循环中无法自拔。 4、以痛苦以及各种消极情绪为食。 5、摆脱痛苦并非是成为无痛无欲的圣人，真正的圣人是可以控制自己情绪的人。将意识带入痛苦，不要去思考痛苦之身，不要去否定它，不要被它所带动，对其宣战就意味着否定自己，仅仅是观察它，就像是自己喜欢的小朋友在调皮捣蛋一样，在痛苦与消极中保持这样的临在状态，就能够超越过去的“罪”、未来的“罚”，从而专注于当下。 我算是长期受到痛苦之身的困扰。在多种情况下会引发痛苦之身的显现， 当我处于以下状态时已经处于痛苦之身的效果之下，处于无意识状态：沉迷某件非主要的事情（比如在做正事之前先做其他事情，尽管它看起来很高尚但始终不是我要做的状态）、回忆过去、自我对话、未来以及虚拟遐想（也就是白日梦）。当处于这些状态下时，我会常常做出一些自己难以控制的行为，如因忘记呼吸而导致突然深呼吸而产生的叹气、突然骂脏话、突然飙日语等。 那么当我处于痛苦之身将要或者已经显现的效果下，我应该如何控制自己：主要通过思想，确认当前正在做的事情不会带来任何用处，过去已经发生的事情无法改变，而其结论也没有意义，因为无法还原当时的情景（脑内私人法庭），未来的事情还没有发生去过渡思考同样没有任何意义，所以应该专注当下，当下十分钟以内自己可以做什么，二十分钟可以做哪些事情，更多的时间自己又能完成哪些内容，如何来专注于当下而摆脱痛苦之身而引发的效果与思考。 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="关键字">关键字</h3>
<p>痛苦之身 无意识   思维认同与情绪认同  临在  </p>
<h3 id="提出与解决的问题">提出与解决的问题</h3>
<p><em>以下非标准答案，是自己第一次阅读此章节后的解答，每一次阅读都应该有不同的解答，或者推翻前一次答案，获得新的东西</em></p>
<h4 id="1、什么是痛苦之身">1、什么是痛苦之身</h4>
<h4 id="2、痛苦之身的两种存在模式">2、痛苦之身的两种存在模式</h4>
<h4 id="3、痛苦之身如何对我们的生活产生影响">3、痛苦之身如何对我们的生活产生影响</h4>
<h4 id="4、痛苦之身如何留存在我们体内的">4、痛苦之身如何留存在我们体内的</h4>
<h4 id="5、如何摆脱痛苦之身">5、如何摆脱痛苦之身</h4>
<hr>
<p>1、痛苦之身是存在于体内的一个能量场，它是当下体会到的情绪痛苦的残留以及过往所有痛苦的集合。它像存在一定的意识，可以在意志薄弱时占据思维、控制身体、破坏生活，去做出伤害自己与他人的行为，产生更多的痛苦，进而强化其存在。</p>
<p>2、痛苦之身有两种存在模式，休眠与激活。可能对于一些人来说它一直存在于休眠状态，但是它很容易通过一些特定环境进入激活状态，这时人可能就会进入消极状态甚至做出一些与平常完全不同的行为。</p>
<p>3、痛苦之身对我们生活的影响有时很小，有时又巨大。当它控制了我们的思维后，我们很容易对其产生无意识的认同，进而追求更多的痛苦，如果不将意识带入痛苦之中，发现痛苦之身的存在，那么人很容易这样的循环中无法自拔。</p>
<p>4、以痛苦以及各种消极情绪为食。</p>
<p>5、摆脱痛苦并非是成为无痛无欲的圣人，真正的圣人是可以控制自己情绪的人。将意识带入痛苦，不要去思考痛苦之身，不要去否定它，不要被它所带动，对其宣战就意味着否定自己，仅仅是观察它，就像是自己喜欢的小朋友在调皮捣蛋一样，在痛苦与消极中保持这样的临在状态，就能够超越过去的“罪”、未来的“罚”，从而专注于当下。</p>
<hr>
<h3 id="你得到了什么东西">你得到了什么东西</h3>
<p>我算是长期受到痛苦之身的困扰。在多种情况下会引发痛苦之身的显现，</p>
<p>当我处于以下状态时已经处于痛苦之身的效果之下，处于无意识状态：沉迷某件非主要的事情（比如在做正事之前先做其他事情，尽管它看起来很高尚但始终不是我要做的状态）、回忆过去、自我对话、未来以及虚拟遐想（也就是白日梦）。当处于这些状态下时，我会常常做出一些自己难以控制的行为，如因忘记呼吸而导致突然深呼吸而产生的叹气、突然骂脏话、突然飙日语等。</p>
<p>那么当我处于痛苦之身将要或者已经显现的效果下，我应该如何控制自己：主要通过思想，确认当前正在做的事情不会带来任何用处，过去已经发生的事情无法改变，而其结论也没有意义，因为无法还原当时的情景（脑内私人法庭），未来的事情还没有发生去过渡思考同样没有任何意义，所以应该专注当下，当下十分钟以内自己可以做什么，二十分钟可以做哪些事情，更多的时间自己又能完成哪些内容，如何来专注于当下而摆脱痛苦之身而引发的效果与思考。</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>HashMap之底层结构红黑树</title>
        <author>
            <name>zcbm</name>
        </author>
        <link href="https://zcbm009.github.io/hashmapzhi-di-ceng-jie-gou-hong-hei-shu.html"/>
        <id>https://zcbm009.github.io/hashmapzhi-di-ceng-jie-gou-hong-hei-shu.html</id>
            <category term="SelfCheckQuestion"/>
            <category term="JAVA"/>
            <category term="Data Structure"/>

        <updated>2021-11-14T08:44:14+08:00</updated>
            <summary>
                <![CDATA[
                    资源 百度网盘:/JAVA/HashMap之底层结构红黑树剖析 请回答以下问题以证明你已经掌握了相关内容 算法逻辑；操作前提；算法实现 特点：三个；遍历方式；时间复杂度； 二叉搜索树的代码实现：结点添加、中序遍历、树结构； 二叉平衡树（AVL树）：解决二叉查找树的弊端；平衡二叉树的弊端； 查找逻辑与二分查找基本相同，时间复杂度及操作前提也相同 二叉查找树的弊端：二叉搜索树可能会退化成链表； AVL树：左右子树高度差不超过1； 平衡二叉树的弊端：通过左旋或者右旋来优化二叉查找树的结构，但是其要求比较高，维护成本较高。 解决二叉平衡树的弊端； 四大性质；三种变换；变换触发规则； 代码实现：插入结点、左旋、右旋、变色； 红黑树的应用； 四大性质：结点不是红色就是黑色；不可能有连在一起的红色结点；根结点都是黑色；每个红色结点的两个子结点都是黑色； 三种变换：改变颜色；左旋（根结点变更、子树变更）；右旋（根结点变更、子树变更）； 变换触发规则：变色–当前结点为红色，父结点为红色，且父结点的兄弟结点也为红色，则执行变色过程，将父结点与兄弟结点变为黑色，祖父结点变为红色； 代码实现中结点要保存父结点以判断及实现左旋、右旋、变色操作； 插入的时候所有的点都设置为红色； 红黑树的应用：Hashmap；TreeMap（Set底层）；Mysql btree；jdk linux进程高度&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="资源">资源</h3>
<p>百度网盘:/JAVA/HashMap之底层结构红黑树剖析</p>
<h3 id="内容整理">内容整理</h3>
<p><u>请回答以下问题以证明你已经掌握了相关内容</u></p>
<h4 id="二分查找">二分查找</h4>
<p>算法逻辑；操作前提；算法实现</p>
<h4 id="二叉查找树">二叉查找树</h4>
<p>特点：三个；遍历方式；时间复杂度；</p>
<p>二叉搜索树的代码实现：结点添加、中序遍历、树结构；</p>
<p>二叉平衡树（AVL树）：解决二叉查找树的弊端；平衡二叉树的弊端；</p>
<p><u><em>查找逻辑与二分查找基本相同，时间复杂度及操作前提也相同</em></u></p>
<hr>
<p>二叉查找树的弊端：二叉搜索树可能会退化成链表；</p>
<p>AVL树：左右子树高度差不超过1；</p>
<p>平衡二叉树的弊端：通过左旋或者右旋来优化二叉查找树的结构，但是其要求比较高，维护成本较高。</p>
<hr>
<h4 id="红黑树">红黑树</h4>
<p>解决二叉平衡树的弊端；</p>
<p><strong>四大性质</strong>；<strong>三种变换</strong>；<strong>变换触发规则</strong>；</p>
<p>代码实现：插入结点、左旋、右旋、变色；</p>
<p>红黑树的应用；</p>
<hr>
<p>四大性质：结点不是红色就是黑色；不可能有连在一起的红色结点；根结点都是黑色；每个红色结点的两个子结点都是黑色；</p>
<p>三种变换：改变颜色；左旋（根结点变更、子树变更）；右旋（根结点变更、子树变更）；</p>
<p>变换触发规则：变色–当前结点为红色，父结点为红色，且父结点的兄弟结点也为红色，则执行变色过程，将父结点与兄弟结点变为黑色，祖父结点变为红色；</p>
<p>代码实现中结点要保存父结点以判断及实现左旋、右旋、变色操作；</p>
<p>插入的时候所有的点都设置为红色；</p>
<p>红黑树的应用：Hashmap；TreeMap（Set底层）；Mysql btree；jdk linux进程高度 nginx等</p>
<hr>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Docker--镜像与容器操作</title>
        <author>
            <name>zcbm</name>
        </author>
        <link href="https://zcbm009.github.io/docker-jing-xiang-yu-rong-qi-cao-zuo.html"/>
        <id>https://zcbm009.github.io/docker-jing-xiang-yu-rong-qi-cao-zuo.html</id>
            <category term="SelfCheckQuestion"/>
            <category term="Docker"/>

        <updated>2021-11-14T08:44:23+08:00</updated>
            <summary>
                <![CDATA[
                    请根据以下内容对已知的知识点进行整理与自检，以证明自己可以对docker进行操作 资源 Docker技术入门与实战 以下标签都需要说明命令及常用命令参数 创建镜像的三种方式，说明其各自的执行过程及其对应的命令及其参数 关于参数-it的意义 创建与运行容器的命令 需要说明容易创建及运行的过程 等待容器退出并打印出返回结果 需要说明常用的错误代码 以守护态运行容器 查看正在运行的容器 查看容器的输出 两种命令的比较或选用 查看容器详情 注意与查看镜像详情之间的区别 查看容器内的进程信息 查看统计信息 HAProxy工具？ 这个章节的内容不太理解 命令及命令的执行过程 什么是父镜像以及父镜像选择 忽略匹配文件路径（类似.gitignore文件的作用）&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="请根据以下内容对已知的知识点进行整理与自检，以证明自己可以对docker进行操作">请根据以下内容对已知的知识点进行整理与自检，以证明自己可以对docker进行操作</h3>
<h4 id="资源">资源</h4>
<p>Docker技术入门与实战</p>
<h4 id="基础概念">基础概念</h4>
<h5 id="容器化技术">容器化技术</h5>
<h5 id="虚拟化技术">虚拟化技术</h5>
<h5 id="docker的发展历史">docker的发展历史</h5>
<h4 id="三大内容">三大内容</h4>
<h5 id="镜像">镜像</h5>
<h6 id="获取镜像">获取镜像</h6>
<ol>
<li>命令、命令格式、命令参数</li>
<li>镜像的内容/组成</li>
<li>镜像重名</li>
<li>公有仓库与私有仓库</li>
</ol>
<h6 id="查看镜像信息">查看镜像信息</h6>
<p><em><u>以下标签都需要说明命令及常用命令参数</u></em></p>
<ol>
<li>列出拥有的镜像信息<ol>
<li>结果表分析</li>
<li>帮助文件查看</li>
</ol>
</li>
<li>为镜像添加标签</li>
<li>查看某个镜像的详细信息</li>
<li>查看镜像历史–查看各层的创建信息</li>
</ol>
<h6 id="搜寻镜像">搜寻镜像</h6>
<h6 id="删除与清理镜像">删除与清理镜像</h6>
<ol>
<li>使用标签来删除镜像<ol>
<li>关于多标签镜像的删除</li>
</ol>
</li>
<li>使用id来删除镜像<ol>
<li>关于存在容器的镜像的删除行为</li>
</ol>
</li>
<li>删除临时镜像以及一些没有被使用的镜像</li>
</ol>
<h6 id="创建镜像">创建镜像</h6>
<p>创建镜像的三种方式，说明其各自的执行过程及其对应的命令及其参数</p>
<h6 id="镜像的导出与载入">镜像的导出与载入</h6>
<h6 id="上传镜像">上传镜像</h6>
<h5 id="容器">容器</h5>
<p><strong><u><em>关于参数<code>-it</code>的意义</em></u></strong></p>
<h6 id="容器与镜像之间的关系">容器与镜像之间的关系</h6>
<h6 id="容器的创建与运行">容器的创建与运行</h6>
<ol>
<li><p>创建与运行容器的命令</p>
<p>需要说明容易创建及运行的过程</p>
</li>
<li><p>等待容器退出并打印出返回结果</p>
<p>需要说明常用的错误代码</p>
</li>
<li><p>以守护态运行容器</p>
</li>
<li><p>查看正在运行的容器</p>
</li>
<li><p>查看容器的输出</p>
</li>
</ol>
<h6 id="停止容器">停止容器</h6>
<ol>
<li>容器的停止与释放</li>
<li>达到终止状态的容器的三种途径</li>
<li>容器的再启动命令–两种</li>
</ol>
<h6 id="进入容器操作处于守护态的容器">进入容器–操作处于守护态的容器</h6>
<p>两种命令的比较或选用</p>
<h6 id="删除容器">删除容器</h6>
<ol>
<li>命令及参数</li>
<li>命令目标的限制以及如何打破限制</li>
</ol>
<h6 id="容器迁移容器的导入与导出">容器迁移–容器的导入与导出</h6>
<ol>
<li>各自的命令与参数</li>
<li>镜像存储文件与容器快照文件的导入区别</li>
</ol>
<h6 id="查看容器">查看容器</h6>
<ol>
<li><p>查看容器详情</p>
<p>注意与查看镜像详情之间的区别</p>
</li>
<li><p>查看容器内的进程信息</p>
</li>
<li><p>查看统计信息</p>
</li>
</ol>
<h6 id="其他容器命令">其他容器命令</h6>
<ol>
<li>容器与主机之间复制文件</li>
<li>查看容器内文件系统的变更</li>
<li>查看端口映射</li>
<li>更新容器的运行时配置</li>
<li>查看Docker支持的容器操作子命令</li>
</ol>
<p>HAProxy工具？</p>
<h5 id="dockerfile">DockerFile</h5>
<h6 id="什么是dockerfile文件，或者说它有怎样的作用（在章节前言中）">什么是DockerFile文件，或者说它有怎样的作用（在章节前言中）</h6>
<h6 id="文件的基本结构">文件的基本结构</h6>
<h6 id="指令说明关于docker文件的编写">指令说明–关于Docker文件的编写</h6>
<ol>
<li>指令的一般格式与指令的分类</li>
<li>详细的指令内容–略（暂时不需要深入对Docker进行分析，先会用Docker再说）</li>
</ol>
<h6 id="创建镜像读取dockerfile文件">创建镜像–读取Dockerfile文件</h6>
<p><u>这个章节的内容不太理解</u></p>
<ol>
<li>命令及命令的执行过程</li>
<li>什么是父镜像以及父镜像选择</li>
<li>忽略匹配文件路径（类似.gitignore文件的作用）</li>
</ol>

            ]]>
        </content>
    </entry>
</feed>
